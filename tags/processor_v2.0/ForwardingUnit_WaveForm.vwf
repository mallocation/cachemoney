/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 80.0;
	SIMULATION_TIME = 80.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("ForwardA")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ForwardA[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ForwardA";
}

SIGNAL("ForwardA[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ForwardA";
}

SIGNAL("ForwardB")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ForwardB[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ForwardB";
}

SIGNAL("ForwardB[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ForwardB";
}

SIGNAL("ForwardC")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 2;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ForwardC[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ForwardC";
}

SIGNAL("ForwardC[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ForwardC";
}

SIGNAL("RegDest_FromMEMStage")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 5;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("RegDest_FromMEMStage[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegDest_FromMEMStage";
}

SIGNAL("RegDest_FromMEMStage[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegDest_FromMEMStage";
}

SIGNAL("RegDest_FromMEMStage[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegDest_FromMEMStage";
}

SIGNAL("RegDest_FromMEMStage[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegDest_FromMEMStage";
}

SIGNAL("RegDest_FromMEMStage[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegDest_FromMEMStage";
}

SIGNAL("RegDest_FromWBStage")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 5;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("RegDest_FromWBStage[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegDest_FromWBStage";
}

SIGNAL("RegDest_FromWBStage[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegDest_FromWBStage";
}

SIGNAL("RegDest_FromWBStage[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegDest_FromWBStage";
}

SIGNAL("RegDest_FromWBStage[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegDest_FromWBStage";
}

SIGNAL("RegDest_FromWBStage[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegDest_FromWBStage";
}

SIGNAL("RegSrc1_FromEXStage")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 5;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("RegSrc1_FromEXStage[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegSrc1_FromEXStage";
}

SIGNAL("RegSrc1_FromEXStage[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegSrc1_FromEXStage";
}

SIGNAL("RegSrc1_FromEXStage[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegSrc1_FromEXStage";
}

SIGNAL("RegSrc1_FromEXStage[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegSrc1_FromEXStage";
}

SIGNAL("RegSrc1_FromEXStage[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegSrc1_FromEXStage";
}

SIGNAL("RegSrc2_FromEXStage")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 5;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("RegSrc2_FromEXStage[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegSrc2_FromEXStage";
}

SIGNAL("RegSrc2_FromEXStage[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegSrc2_FromEXStage";
}

SIGNAL("RegSrc2_FromEXStage[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegSrc2_FromEXStage";
}

SIGNAL("RegSrc2_FromEXStage[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegSrc2_FromEXStage";
}

SIGNAL("RegSrc2_FromEXStage[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegSrc2_FromEXStage";
}

SIGNAL("RegSrc_ForStoreWord")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 5;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("RegSrc_ForStoreWord[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegSrc_ForStoreWord";
}

SIGNAL("RegSrc_ForStoreWord[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegSrc_ForStoreWord";
}

SIGNAL("RegSrc_ForStoreWord[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegSrc_ForStoreWord";
}

SIGNAL("RegSrc_ForStoreWord[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegSrc_ForStoreWord";
}

SIGNAL("RegSrc_ForStoreWord[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "RegSrc_ForStoreWord";
}

SIGNAL("RegWrite_FromMEMStage")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("RegWrite_FromWBStage")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

TRANSITION_LIST("ForwardA[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 80.0;
	}
}

TRANSITION_LIST("ForwardA[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("ForwardB[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("ForwardB[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("ForwardC[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("ForwardC[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegDest_FromMEMStage[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegDest_FromMEMStage[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegDest_FromMEMStage[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 80.0;
	}
}

TRANSITION_LIST("RegDest_FromMEMStage[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegDest_FromMEMStage[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 80.0;
	}
}

TRANSITION_LIST("RegDest_FromWBStage[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegDest_FromWBStage[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegDest_FromWBStage[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 80.0;
	}
}

TRANSITION_LIST("RegDest_FromWBStage[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegDest_FromWBStage[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 80.0;
	}
}

TRANSITION_LIST("RegSrc1_FromEXStage[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegSrc1_FromEXStage[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegSrc1_FromEXStage[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 80.0;
	}
}

TRANSITION_LIST("RegSrc1_FromEXStage[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegSrc1_FromEXStage[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 80.0;
	}
}

TRANSITION_LIST("RegSrc2_FromEXStage[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegSrc2_FromEXStage[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegSrc2_FromEXStage[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegSrc2_FromEXStage[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 80.0;
	}
}

TRANSITION_LIST("RegSrc2_FromEXStage[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 80.0;
	}
}

TRANSITION_LIST("RegSrc_ForStoreWord[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegSrc_ForStoreWord[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegSrc_ForStoreWord[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegSrc_ForStoreWord[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegSrc_ForStoreWord[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("RegWrite_FromMEMStage")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 80.0;
	}
}

TRANSITION_LIST("RegWrite_FromWBStage")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 80.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "ForwardA";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
	CHILDREN = 1, 2;
}

DISPLAY_LINE
{
	CHANNEL = "ForwardA[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ForwardA[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ForwardB";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
	CHILDREN = 4, 5;
}

DISPLAY_LINE
{
	CHANNEL = "ForwardB[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "ForwardB[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "ForwardC";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 0;
	CHILDREN = 7, 8;
}

DISPLAY_LINE
{
	CHANNEL = "ForwardC[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "ForwardC[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "RegDest_FromMEMStage";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
	CHILDREN = 10, 11, 12, 13, 14;
}

DISPLAY_LINE
{
	CHANNEL = "RegDest_FromMEMStage[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "RegDest_FromMEMStage[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "RegDest_FromMEMStage[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "RegDest_FromMEMStage[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "RegDest_FromMEMStage[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "RegDest_FromWBStage";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 0;
	CHILDREN = 16, 17, 18, 19, 20;
}

DISPLAY_LINE
{
	CHANNEL = "RegDest_FromWBStage[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "RegDest_FromWBStage[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "RegDest_FromWBStage[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "RegDest_FromWBStage[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "RegDest_FromWBStage[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 15;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc1_FromEXStage";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 21;
	TREE_LEVEL = 0;
	CHILDREN = 22, 23, 24, 25, 26;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc1_FromEXStage[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc1_FromEXStage[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc1_FromEXStage[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc1_FromEXStage[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc1_FromEXStage[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc2_FromEXStage";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 27;
	TREE_LEVEL = 0;
	CHILDREN = 28, 29, 30, 31, 32;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc2_FromEXStage[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc2_FromEXStage[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc2_FromEXStage[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc2_FromEXStage[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 31;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc2_FromEXStage[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 32;
	TREE_LEVEL = 1;
	PARENT = 27;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc_ForStoreWord";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 33;
	TREE_LEVEL = 0;
	CHILDREN = 34, 35, 36, 37, 38;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc_ForStoreWord[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 34;
	TREE_LEVEL = 1;
	PARENT = 33;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc_ForStoreWord[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 35;
	TREE_LEVEL = 1;
	PARENT = 33;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc_ForStoreWord[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 36;
	TREE_LEVEL = 1;
	PARENT = 33;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc_ForStoreWord[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 37;
	TREE_LEVEL = 1;
	PARENT = 33;
}

DISPLAY_LINE
{
	CHANNEL = "RegSrc_ForStoreWord[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 38;
	TREE_LEVEL = 1;
	PARENT = 33;
}

DISPLAY_LINE
{
	CHANNEL = "RegWrite_FromMEMStage";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 39;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "RegWrite_FromWBStage";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 40;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
